// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model PoemOfTheMonth {
    id        String   @id @default("001")
    content   String   @db.VarChar(999)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// ************************* SHARED DB *************************
// Uncomment below when adding new tables/fields to maintain 
// consistency and avoid dropping existing tables

// model TwitterLitePost {
//     id        String   @id @default(cuid())
//     createdAt DateTime @default(now())
//     content   String   @db.VarChar(255)
//     authorId  String

//     @@index([authorId])
// }

// // Necessary for Next auth
// model Account {
//     id                       String  @id @default(cuid())
//     userId                   String
//     type                     String
//     provider                 String
//     providerAccountId        String
//     refresh_token            String? // @db.Text
//     access_token             String? // @db.Text
//     expires_at               Int?
//     token_type               String?
//     scope                    String?
//     id_token                 String? // @db.Text
//     session_state            String?
//     refresh_token_expires_in Int? // GitHub Auth only
//     user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
//     @@index([userId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@index([userId])
// }

// // Since we are sharing same DB, a user can be associated with multiple apps
// model User {
//     id            String       @id @default(cuid())
//     name          String?
//     email         String?      @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     airCampUser   AirCampUser?
// }

// model VerificationToken {
//     identifier String
//     token      String
//     expires    DateTime

//     @@unique([identifier, token])
// }

// model AirCampUser {
//     id                String              @id @default(cuid())
//     airCampUserId     String              @unique
//     user              User                @relation(fields: [airCampUserId], references: [id], onDelete: Cascade)
//     // Legacy fields
//     username          String
//     firstName         String
//     lastName          String
//     avatar            String?
//     bio               String?
//     airCampCampground AirCampCampground[]
//     airCampComment    AirCampComment[]

//     @@unique([username])
//     @@index([username])
//     @@index([airCampUserId])
// }

// model AirCampCampground {
//     id            String           @id @default(cuid())
//     airCampUserId String
//     // Optional for now
//     owner         AirCampUser?     @relation(fields: [airCampUserId], references: [airCampUserId], onDelete: Cascade)
//     summary       String           @db.VarChar(999)
//     description   String           @db.VarChar(999)
//     // Legacy fields
//     name          String
//     price         String
//     location      String
//     lat           Float
//     lng           Float
//     createdAt     DateTime         @default(now())
//     comment       AirCampComment[]

//     @@unique([name])
//     @@index([airCampUserId])
// }

// model AirCampComment {
//     id            String            @id @default(cuid())
//     campgroundId  String
//     campground    AirCampCampground @relation(fields: [campgroundId], references: [id])
//     airCampUserId String
//     airCampUser   AirCampUser       @relation(fields: [airCampUserId], references: [id], onDelete: Cascade)
//     // Legacy fields
//     text          String
//     createdAt     DateTime          @default(now())

//     @@index([campgroundId])
//     @@index([airCampUserId])
// }
