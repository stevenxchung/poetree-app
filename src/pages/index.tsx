import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import { useForm, type FieldValues, type SubmitHandler } from "react-hook-form";
import toast from "react-hot-toast";
import { api } from "~/utils/api";

const formatPoemFromDB = (poem: string): string => {
  // Helper method to format poem from DB
  const separatorMap: Record<string, string> = {
    ",": ",+",
    ".": ".+",
    "?": "?+",
  };
  const separatorReplacedPoem = poem.replace(
    /[,.?]/g,
    (s) => separatorMap[s] || s
  );
  const stringToArray = separatorReplacedPoem.split("+");

  let count = 0;
  stringToArray.forEach((s, i) => {
    count += 1;
    if (count === 4) {
      stringToArray[i] = s + "<br/><br/>";
      count = 0;
    } else if (i !== stringToArray.length - 1) {
      stringToArray[i] = s + "<br/>";
    }
  });

  return stringToArray.join("");
};

const BackgroundMusic = () => {
  const audioRef = useRef<HTMLAudioElement>(null);

  useEffect(() => {
    if (audioRef.current) {
      audioRef.current.play().catch((error) => {
        // Handle play error, if any
        console.error("Audio play error:", error);
      });
      audioRef.current.loop = true;
    }
  });

  return <audio ref={audioRef} src="/music/waves.mp3" loop />;
};

const HiddenContent = (props: { content: string }) => {
  return (
    <>
      <BackgroundMusic />
      <div className="animate-fade-in-slow rounded-lg bg-custom-div px-10 py-10 text-custom-content">
        {props.content ? (
          <>
            <h1 className="text-4xl">Monthly Poetry</h1>
            <br />
            <br />
            <p
              className="text-xl"
              dangerouslySetInnerHTML={{
                __html: formatPoemFromDB(props.content),
              }}
            />
          </>
        ) : (
          <div>
            <span className="text-xl text-red-500">Something went wrong!</span>
          </div>
        )}
      </div>
    </>
  );
};

export default function Home() {
  const { register, handleSubmit, reset } = useForm();
  const [secret, setSecret] = useState("");
  const [submitted, setSubmitted] = useState(false);

  const { data, refetch } = api.poetry.viewContent.useQuery(
    { contentPass: secret },
    { enabled: false }
  );

  const submitPass = (input: { pass: string }) => {
    try {
      reset();
      setSecret(input.pass);
      setSubmitted(true); // Mark the form as submitted
    } catch (error) {
      console.error(error);
    }
  };

  // Use refetch when the form is submitted
  useEffect(() => {
    if (submitted) {
      void refetch();
      setSubmitted(false); // Reset the submitted state

      if (!data) {
        toast.error("Unauthorized!");
      }
      console.log("API Error:", data);
    }
  }, [refetch, submitted, data]);

  return (
    <>
      <Head>
        <title>Poetree</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.png" />
      </Head>
      <main
        className={`flex h-screen items-center justify-center bg-cover bg-center duration-10s ease-in-out ${
          data ? "bg-aman" : "bg-amanGray"
        }`}
      >
        {!data ? (
          <form
            onSubmit={handleSubmit(submitPass as SubmitHandler<FieldValues>)}
          >
            <div className="flex flex-col space-y-4 text-xl">
              <label>
                <input
                  className="text-center"
                  placeholder="Password"
                  type="password"
                  {...register("pass")}
                />
              </label>
              <button
                type="submit"
                className="rounded-sm bg-custom-div text-custom-content"
              >
                Submit
              </button>
            </div>
          </form>
        ) : (
          <HiddenContent content={data.content} />
        )}
      </main>
    </>
  );
}
